16,20070709030635,,,2,2|2,1,1,組み込みプログラム１,こんばんは。工科展主任、松宮です。<br /><br />先日、第一回工科展委員会に参加しました。<br />工科展の審査は、教授陣による審査と、訪問者によるアンケート審査があるようです。<br />どちらも、審査で1位になると賞金が出ます。<br />はりきっていきまっしょい。<br /><br /><br />以下、組み込みプログラムに関する話題です。<br /><br /><br />H8からシフトレジスタを制御するためのソフトを書きました。　//sf595-1.c<br />P4のポートに０または１を、BYTE制御もしくはBIT制御で送出するものです。<br />ビットフィールドを作成し、そこにアクセスしています。コーディングがめちゃめちゃなのは許してください・・・・<br /><br />このプログラムは、MES2上で動作します。<br />このプログラムのコンパイルには、reg3067.h（改変版）をインクルードしてください。<br /><br />以下、sf595-1.c　と　reg3067.h（改変版）を見るには、本文を開いてください。,sf595-1.c<br /><br />#include <h8/reg3067.h><br />#include <mes2.h><br /><br />union un_p4pdr p4_stat;<br /><br />const unsigned char flg_bit[8] = {0x01&#44;0x02&#44;0x04&#44;0x08&#44;0x10&#44;0x20&#44;0x40&#44;0x80};<br /><br /><br />int bytemode(void)<br />{<br />	int inp=0&#44;cc=0;<br /><br />	printf("BYTEMODE.output p4 select(7&#44;6&#44;5&#44;4&#44;3&#44;2&#44;1&#44;0.):");<br />	scanf("%d"&#44;&inp);<br />	cc=inp;<br />	if(inp<=7 && inp>=0)<br />	{<br />		printf("output mode select.(set1:1 set2:2 AND:3 OR:4):");<br />		scanf("%d"&#44;&inp);<br />		if(inp<=4 && inp>=1)<br />		{<br />			switch(inp)<br />			{<br />				case 1:<br />					P4DR.BYTE=flg_bit[cc];<br />					p4_stat.BYTE=flg_bit[cc];<br />					break;<br />				case 2:<br />					P4DR.BYTE=~flg_bit[cc];<br />					p4_stat.BYTE=~flg_bit[cc];<br />					break;					<br />				case 3:<br />					P4DR.BYTE=p4_stat.BYTE & flg_bit[cc];<br />					p4_stat.BYTE=p4_stat.BYTE & flg_bit[cc];<br />					break;<br />				case 4:<br />					P4DR.BYTE=p4_stat.BYTE | flg_bit[cc];<br />					p4_stat.BYTE=p4_stat.BYTE | flg_bit[cc];<br />					break;<br />				default:<br />					printf("error in mode.switch.\r\n");<br />					break;<br />			}<br />			return 0;<br />		}<br />		else return 1;<br />	}<br />	return 1;<br />}<br /><br />int bitmode(void)<br />{<br />	int inp=0&#44;cc=0;<br /><br />	printf("BITMODE.output p4 select(7&#44;6&#44;5&#44;4&#44;3&#44;2&#44;1&#44;0) ");<br />	scanf("%d"&#44;&inp);<br />	cc=inp;<br />	if(inp<=7 && inp>=0)<br />	{<br />		printf("output select(1&#44;0):");<br />		scanf("%d"&#44;inp);<br />		if(inp==0 | inp==1)<br />		{<br />			if(cc==7)<br />			{<br />				P4DR.BIT.B7=inp;<br />				p4_stat.BIT.B7=inp;<br />				return 0;<br />			}<br />			if(cc==6)<br />			{<br />				P4DR.BIT.B6=inp;<br />				p4_stat.BIT.B6=inp;<br />				return 0;<br />			}<br />			if(cc==5)<br />			{<br />				P4DR.BIT.B5=inp;<br />				p4_stat.BIT.B5=inp;<br />				return 0;<br />			}<br />			if(cc==4)<br />			{<br />				P4DR.BIT.B4=inp;<br />				p4_stat.BIT.B4=inp;<br />				return 0;<br />			}<br />			if(cc==3)<br />			{<br />				P4DR.BIT.B3=inp;<br />				p4_stat.BIT.B3=inp;<br />				return 0;<br />			}<br />			if(cc==2)<br />			{<br />				P4DR.BIT.B2=inp;<br />				p4_stat.BIT.B2=inp;<br />				return 0;<br />			}<br />			if(cc==1)<br />			{<br />				P4DR.BIT.B1=inp;<br />				p4_stat.BIT.B1=inp;<br />				return 0;<br />			}<br />			if(cc==0)<br />			{<br />				P4DR.BIT.B0=inp;<br />				p4_stat.BIT.B0=inp;<br />				return 0;<br />			}<br />			else<br />			{<br />				printf("error in mode.switch.\r\n");<br />				return 1;<br />			}<br />			return 0;<br />		}<br />		return 1;<br />	}<br />	return 1;<br />}<br /><br /><br /><br />int main(void) {<br />	int clock=0&#44;p=0&#44;inp=0;<br />	P4DDR=0xff;<br />	P4DR.BYTE=0x00;<br />	<br />	printf("input 1:BYTEMODE 2:BITMODE");<br />	scanf("%d"&#44;&inp);<br />	switch(inp)<br />	{<br />		case 1:<br />			while(1)<br />			{<br />				inp=bytemode();<br />				if(inp==1)break;<br />			}<br />			break;<br />		case 2:<br />			while(1)<br />			{<br />				inp=bitmode();<br />				if(inp==1)break;<br />			}<br />			break;<br />		default:<br />			printf("Exit....\r\n");<br />			break;<br />	}<br /><br />		<br />}<br /><br /><br /><br /><br />/*<br /><br />		p=0;p=random();<br />		printf("b7=%d\r\n"&#44;p);<br />		P4DR.BIT.B7=p;<br />		sleep(100);<br />		printf("b6=%d\r\n"&#44;1);<br />		P4DR.BIT.B6=1;<br />		sleep(100);<br />		P4DR.BIT.B7=0;<br />		P4DR.BIT.B6=0;<br />		printf("b5=%d\r\n"&#44;clock++);<br /><br />	<br />	{<br />		}<br />	P4DR.BIT.B5=1;<br /><br />int random(void)<br />{<br />	int count;<br />    srand(rand());<br />    for (count = 0 ; count < 10 ; count++)<br />	{<br />		if((rand()/1000)>=70)return 1;<br />		else return 0;<br />	}<br />}<br /><br />#define P4DR (*(volatile union un_p4dr *)0xffffd3) /* P4DR  Address*/<br /><br />//union un_p4<br />//{                                         /* union P4DR   */<br />//	unsigned char BYTE;                       /*  Byte Access */<br />//	struct {                                  /*  Bit  Access */<br />//		unsigned char B7:1;                /*    Bit 7     */<br />//		unsigned char B6:1;                /*    Bit 6     */<br />//		unsigned char B5:1;                /*    Bit 5     */<br />//		unsigned char B4:1;                /*    Bit 4     */<br />//		unsigned char B3:1;                /*    Bit 3     */<br />//		unsigned char B2:1;                /*    Bit 2     */<br />//		unsigned char B1:1;                /*    Bit 1     */<br />//		unsigned char B0:1;                /*    Bit 0     */<br />//	} BIT;<br />//};<br />//<br />//union un_p4 un_p4dr;<br />//<br /><br /><br />reg3067.h（改変版）<br /><br />#define load_segment(num) {int base;base = (*(volatile unsigned int *)(0xfffd10 + num * 4));asm("mov.l %0&#44; er5" :: "r" (base));}<br />#define set_stack(stack) asm("mov.l %0&#44; sp" :: "r" (stack))<br /><br />#define TDRE	0x80<br />#define RDRF	0x40<br />#define ORER	0x20<br />#define FER	0x10<br />#define PER	0x08<br />#define TEND	0x04<br />#define TIE	0x80<br />#define RIE	0x40<br />#define TE	0x20<br />#define RE	0x10<br /><br />/* port address of internal registers */<br /><br />#define MDCR  (*(volatile unsigned char *)0xfee011)<br />#define SYSCR (*(volatile unsigned char *)0xfee012)<br />#define BRCR  (*(volatile unsigned char *)0xfee013)<br />#define ISCR  (*(volatile unsigned char *)0xfee014)<br />#define IER  (*(volatile unsigned char *)0xfee015)<br />#define ISR  (*(volatile unsigned char *)0xfee016)<br />#define IPRA  (*(volatile unsigned char *)0xfee018)<br />#define IPRB  (*(volatile unsigned char *)0xfee019)<br />#define MSTCRH  (*(volatile unsigned char *)0xfee01c)<br />#define CSCR  (*(volatile unsigned char *)0xfee01f)<br />#define ABWCR (*(volatile unsigned char *)0xfee020)<br />#define ASTCR (*(volatile unsigned char *)0xfee021)<br />#define WCRH  (*(volatile unsigned char *)0xfee022)<br />#define WCRL  (*(volatile unsigned char *)0xfee023)<br />#define BCR   (*(volatile unsigned char *)0xfee024)<br />#define DRCRA	(*(volatile unsigned char *)0xfee026)<br />#define DRCRB	(*(volatile unsigned char *)0xfee027)<br />#define RTMCSR	(*(volatile unsigned char *)0xfee028)<br />#define RTCNT	(*(volatile unsigned char *)0xfee029)<br />#define RTCOR	(*(volatile unsigned char *)0xfee02a)<br />#define RAMCR (*(volatile unsigned char *)0xfee077)<br />#define FLMCR (*(volatile unsigned char *)0xfee030)<br />#define FLMCR1 (*(volatile unsigned char *)0xfee030)<br />#define FLMCR2 (*(volatile unsigned char *)0xfee031)<br />#define EBR   (*(volatile unsigned char *)0xfee032)<br />#define EBR1   (*(volatile unsigned char *)0xfee032)<br />#define EBR2   (*(volatile unsigned char *)0xfee033)<br />#define FLMSR (*(volatile unsigned char *)0xfee07d)<br />#define TSTR  (*(volatile unsigned char *)0xffff60)<br />#define TSNC  (*(volatile unsigned char *)0xffff61)<br />#define TMDR  (*(volatile unsigned char *)0xffff62)<br />#define TOLR  (*(volatile unsigned char *)0xffff63)<br />#define TISRA (*(volatile unsigned char *)0xffff64)<br />#define TISRB (*(volatile unsigned char *)0xffff65)<br />#define TISRC (*(volatile unsigned char *)0xffff66)<br />#define TCR0  (*(volatile unsigned char *)0xffff68)<br />#define TIOR0 (*(volatile unsigned char *)0xffff69)<br />#define TCNT0 (*(volatile unsigned short *)0xffff6a)<br />#define GRA0 (*(volatile unsigned short *)0xffff6c)<br />#define GRB0 (*(volatile unsigned short *)0xffff6e)<br />#define TCR1  (*(volatile unsigned char *)0xffff70)<br />#define TIOR1 (*(volatile unsigned char *)0xffff71)<br />#define TCNT1 (*(volatile unsigned short *)0xffff72)<br />#define GRA1 (*(volatile unsigned short *)0xffff74)<br />#define GRB1 (*(volatile unsigned short *)0xffff76)<br />#define TCR2  (*(volatile unsigned char *)0xffff78)<br />#define TIOR2 (*(volatile unsigned char *)0xffff79)<br />#define TCNT2 (*(volatile unsigned short *)0xffff7a)<br />#define GRA2 (*(volatile unsigned short *)0xffff7c)<br />#define GRB2 (*(volatile unsigned short *)0xffff7e)<br />#define TCSR (*(volatile unsigned short *)0xffff8c)<br />#define TCNT (*(volatile unsigned short *)0xffff8d)<br /><br />#define T8TCR0  (*(volatile unsigned char *)0xffff80)<br />#define T8TCR1  (*(volatile unsigned char *)0xffff81)<br /><br />#define SMR0 (*(volatile unsigned char *)0xffffb0)<br />#define BRR0 (*(volatile unsigned char *)0xffffb1)<br />#define SCR0 (*(volatile unsigned char *)0xffffb2)<br />#define TDR0 (*(volatile unsigned char *)0xffffb3)<br />#define SSR0 (*(volatile unsigned char *)0xffffb4)<br />#define RDR0 (*(volatile unsigned char *)0xffffb5)<br />#define SCMR0 (*(volatile unsigned char *)0xffffb6)<br />#define SMR1 (*(volatile unsigned char *)0xffffb8)<br />#define BRR1 (*(volatile unsigned char *)0xffffb9)<br />#define SCR1 (*(volatile unsigned char *)0xffffba)<br />#define TDR1 (*(volatile unsigned char *)0xffffbb)<br />#define SSR1 (*(volatile unsigned char *)0xffffbc)<br />#define RDR1 (*(volatile unsigned char *)0xffffbd)<br />#define SCMR1 (*(volatile unsigned char *)0xffffbe)<br />#define SMR2 (*(volatile unsigned char *)0xffffc0)<br />#define BRR2 (*(volatile unsigned char *)0xffffc1)<br />#define SCR2 (*(volatile unsigned char *)0xffffc2)<br />#define TDR2 (*(volatile unsigned char *)0xffffc3)<br />#define SSR2 (*(volatile unsigned char *)0xffffc4)<br />#define RDR2 (*(volatile unsigned char *)0xffffc5)<br />#define SCMR2 (*(volatile unsigned char *)0xffffc6)<br /><br />#define P1DDR (*(volatile unsigned char *)0xfee000)<br />#define P2DDR (*(volatile unsigned char *)0xfee001)<br />#define P3DDR (*(volatile unsigned char *)0xfee002)<br />#define P4DDR (*(volatile unsigned char *)0xfee003)<br />#define P5DDR (*(volatile unsigned char *)0xfee004)<br />#define P6DDR (*(volatile unsigned char *)0xfee005)<br />#define P7DDR (*(volatile unsigned char *)0xfee006)<br />#define P8DDR (*(volatile unsigned char *)0xfee007)<br />#define P9DDR (*(volatile unsigned char *)0xfee008)<br />#define PADDR (*(volatile unsigned char *)0xfee009)<br />#define PBDDR (*(volatile unsigned char *)0xfee00a)<br />#define P2PCR (*(volatile unsigned char *)0xfee03c)<br /><br />union un_p4pcr {                                        // union P4PCR<br />               unsigned char BYTE;                      //  Byte Access<br />               struct {                                 //  Bit  Access<br />                      unsigned char B7:1;               //    Bit 7<br />                      unsigned char B6:1;               //    Bit 6<br />                      unsigned char B5:1;               //    Bit 5<br />                      unsigned char B4:1;               //    Bit 4<br />                      unsigned char B3:1;               //    Bit 3<br />                      unsigned char B2:1;               //    Bit 2<br />                      unsigned char B1:1;               //    Bit 1<br />                      unsigned char B0:1;               //    Bit 0<br />                      }      BIT;                       //<br />};                                                      //<br /><br /><br />#define P4PCR   (*(volatile union  un_p4pcr *)0xFEE03E) // P4PCR Address<br />#define P5PCR (*(volatile unsigned char *)0xfee03f)<br />#define P1DR  (*(volatile unsigned char *)0xffffd0)<br />#define P2DR  (*(volatile unsigned char *)0xffffd1)<br />#define P3DR  (*(volatile unsigned char *)0xffffd2)<br />//#define P4DR  (*(volatile unsigned char *)0xffffd3)<br /><br /><br /><br />union un_p4pdr<br />{                                         /* union P4DR   */<br />	unsigned char BYTE;                       /*  Byte Access */<br />	struct {                                  /*  Bit  Access */<br />		unsigned char B7:1;                /*    Bit 7     */<br />		unsigned char B6:1;                /*    Bit 6     */<br />		unsigned char B5:1;                /*    Bit 5     */<br />		unsigned char B4:1;                /*    Bit 4     */<br />		unsigned char B3:1;                /*    Bit 3     */<br />		unsigned char B2:1;                /*    Bit 2     */<br />		unsigned char B1:1;                /*    Bit 1     */<br />		unsigned char B0:1;                /*    Bit 0     */<br />	} BIT;<br />};<br /><br />#define P4DR  (*(volatile union un_p4pdr *)0xffffd3) // P4DR  Address<br />#define P5DR  (*(volatile unsigned char *)0xffffd4)<br />#define P6DR  (*(volatile unsigned char *)0xffffd5)<br />#define P7DR  (*(volatile unsigned char *)0xffffd6)<br />#define P8DR  (*(volatile unsigned char *)0xffffd7)<br />#define P9DR  (*(volatile unsigned char *)0xffffd8)<br />#define PADR  (*(volatile unsigned char *)0xffffd9)<br />#define PBDR  (*(volatile unsigned char *)0xffffda)<br /><br />#define TCNT_WR (*(volatile unsigned short *)0xffff8c)<br />#define TCSR_WR (*(volatile unsigned short *)0xffff8c)<br />#define TCNT_RD (*(volatile unsigned char *)0xffff8d)<br />#define TCSR_RD (*(volatile unsigned char *)0xffff8c)<br /><br />#define ADDRA  (*(volatile unsigned short *)0xffffe0)<br />#define ADDRB  (*(volatile unsigned short *)0xffffe2)<br />#define ADDRC  (*(volatile unsigned short *)0xffffe4)<br />#define ADDRD  (*(volatile unsigned short *)0xffffe6)<br />#define ADDRAH (*(volatile unsigned char *)0xffffe0)<br />#define ADDRAL (*(volatile unsigned char *)0xffffe1)<br />#define ADDRBH (*(volatile unsigned char *)0xffffe2)<br />#define ADDRBL (*(volatile unsigned char *)0xffffe3)<br />#define ADDRCH (*(volatile unsigned char *)0xffffe4)<br />#define ADDRCL (*(volatile unsigned char *)0xffffe5)<br />#define ADDRDH (*(volatile unsigned char *)0xffffe6)<br />#define ADDRDL (*(volatile unsigned char *)0xffffe7)<br />#define ADCSR  (*(volatile unsigned char *)0xffffe8)<br />#define ADCR   (*(volatile unsigned char *)0xffffe9)<br /><br />#define RTCOR   (*(volatile unsigned char *)0xfee02a)<br />#define RTMCSR   (*(volatile unsigned char *)0xfee028)<br />#define DRCRA   (*(volatile unsigned char *)0xfee026)<br />#define DRCRB   (*(volatile unsigned char *)0xfee027)<br /><br />#define TCR0_8   (*(volatile unsigned char *)0xffff80)<br />#define TCR1_8   (*(volatile unsigned char *)0xffff81)<br />#define TCSR0_8  (*(volatile unsigned char *)0xffff82)<br />#define TCSR1_8  (*(volatile unsigned char *)0xffff83)<br />#define TCORA0_8 (*(volatile unsigned char *)0xffff84)<br />#define TCORA1_8 (*(volatile unsigned char *)0xffff85)<br />#define TCORB0_8 (*(volatile unsigned char *)0xffff86)<br />#define TCORB1_8 (*(volatile unsigned char *)0xffff87)<br />#define TCNT0_8  (*(volatile unsigned char *)0xffff88)<br />#define TCNT1_8  (*(volatile unsigned char *)0xffff89)<br />#define TCR2_8   (*(volatile unsigned char *)0xffff90)<br />#define TCR3_8   (*(volatile unsigned char *)0xffff91)<br />#define TCSR2_8  (*(volatile unsigned char *)0xffff92)<br />#define TCSR3_8  (*(volatile unsigned char *)0xffff93)<br />#define TCORA2_8 (*(volatile unsigned char *)0xffff94)<br />#define TCORA3_8 (*(volatile unsigned char *)0xffff95)<br />#define TCORB2_8 (*(volatile unsigned char *)0xffff96)<br />#define TCORB3_8 (*(volatile unsigned char *)0xffff97)<br />#define TCNT2_8  (*(volatile unsigned char *)0xffff98)<br />#define TCNT3_8  (*(volatile unsigned char *)0xffff99)<br /><br />#define MAR0AR  (*(volatile unsigned char *)0xffff20)<br />#define MAR0AE  (*(volatile unsigned char *)0xffff21)<br />#define MAR0AH  (*(volatile unsigned char *)0xffff22)<br />#define MAR0AL  (*(volatile unsigned char *)0xffff23)<br />#define IOAR0A  (*(volatile unsigned char *)0xffff26)<br />#define ETCR0AH (*(volatile unsigned char *)0xffff24)<br />#define ETCR0AL (*(volatile unsigned char *)0xffff25)<br />#define DTCR0A  (*(volatile unsigned char *)0xffff27)<br />#define MAR0BR  (*(volatile unsigned char *)0xffff28)<br />#define MAR0BE  (*(volatile unsigned char *)0xffff29)<br />#define MAR0BH  (*(volatile unsigned char *)0xffff2a)<br />#define MAR0BL  (*(volatile unsigned char *)0xffff2b)<br />#define IOAR0B  (*(volatile unsigned char *)0xffff2e)<br />#define ETCR0BH (*(volatile unsigned char *)0xffff2c)<br />#define ETCR0BL (*(volatile unsigned char *)0xffff2d)<br />#define DTCR0B  (*(volatile unsigned char *)0xffff2f)<br />#define MAR1AR  (*(volatile unsigned char *)0xffff30)<br />#define MAR1AE  (*(volatile unsigned char *)0xffff31)<br />#define MAR1AH  (*(volatile unsigned char *)0xffff32)<br />#define MAR1AL  (*(volatile unsigned char *)0xffff33)<br />#define IOAR1A  (*(volatile unsigned char *)0xffff36)<br />#define ETCR1AH (*(volatile unsigned char *)0xffff34)<br />#define ETCR1AL (*(volatile unsigned char *)0xffff35)<br />#define DTCR1A  (*(volatile unsigned char *)0xffff37)<br />#define MAR1BR  (*(volatile unsigned char *)0xffff38)<br />#define MAR1BE  (*(volatile unsigned char *)0xffff39)<br />#define MAR1BH  (*(volatile unsigned char *)0xffff3a)<br />#define MAR1BL  (*(volatile unsigned char *)0xffff3b)<br />#define IOAR1B  (*(volatile unsigned char *)0xffff3e)<br />#define ETCR1BH (*(volatile unsigned char *)0xffff3c)<br />#define ETCR1BL (*(volatile unsigned char *)0xffff3d)<br />#define DTCR1B  (*(volatile unsigned char *)0xffff3f)<br />,1,
